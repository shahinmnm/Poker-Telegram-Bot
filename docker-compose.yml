# Compose file format version is now inferred automatically
services:
  redis:
    image: "redis:7.0.2"
    restart: always
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    command: "redis-server --save 60 1 --loglevel warning"
    networks:
      - poker_network

  bot:
    build: .
    restart: always
    ports:
      - "127.0.0.1:3000:3000"
      - "127.0.0.1:8000:8000"
    environment:
      - POKERBOT_TOKEN=${POKERBOT_TOKEN}
      - POKERBOT_REDIS_HOST=redis
      - POKERBOT_WEBHOOK_LISTEN=${POKERBOT_WEBHOOK_LISTEN}
      - POKERBOT_WEBHOOK_PORT=${POKERBOT_WEBHOOK_PORT}
      - POKERBOT_WEBHOOK_PATH=${POKERBOT_WEBHOOK_PATH}
      - POKERBOT_WEBHOOK_PUBLIC_URL=${POKERBOT_WEBHOOK_PUBLIC_URL}
      - POKERBOT_WEBHOOK_SECRET=${POKERBOT_WEBHOOK_SECRET}
      - POKERBOT_RATE_LIMIT_PER_MINUTE=${POKERBOT_RATE_LIMIT_PER_MINUTE}
      - POKERBOT_DEBUG_TRACE_MESSAGES=1
      - POKERBOT_METRICS_PORT=8000
      - POKERBOT_DB_POOL_MIN_SIZE=${POKERBOT_DB_POOL_MIN_SIZE:-10}
      - POKERBOT_DB_POOL_MAX_SIZE=${POKERBOT_DB_POOL_MAX_SIZE:-20}
      - POKERBOT_CACHE_L1_SIZE=${POKERBOT_CACHE_L1_SIZE:-1000}
      - POKERBOT_CACHE_L2_SIZE=${POKERBOT_CACHE_L2_SIZE:-5000}
      - POKERBOT_BATCH_ENABLED=${POKERBOT_BATCH_ENABLED:-true}
      - POKERBOT_BATCH_SIZE=${POKERBOT_BATCH_SIZE:-50}
    depends_on:
      - redis
    networks:
      - poker_network

  alert-bridge:
    build:
      context: .
      dockerfile: Dockerfile.alert-bridge
    restart: always
    ports:
      - "127.0.0.1:9099:9099"
    environment:
      - POKERBOT_TOKEN=${POKERBOT_TOKEN}
      - ADMIN_CHAT_ID=${ADMIN_CHAT_ID}
      - TELEGRAM_API_BASE=${TELEGRAM_API_BASE:-https://api.telegram.org}
      - ALERT_BRIDGE_PORT=9099
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:9099/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      redis:
        condition: service_started
    networks:
      - poker_network

  alertmanager:
    image: prom/alertmanager:latest
    restart: always
    ports:
      - "127.0.0.1:9093:9093"
    volumes:
      - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9093/-/ready"]
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      alert-bridge:
        condition: service_healthy
    networks:
      - poker_network

  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/poker_security_alerts.yml:/etc/prometheus/poker_security_alerts.yml:ro
      - type: volume
        source: prometheus_data
        target: /prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      alertmanager:
        condition: service_started
      bot:
        condition: service_started
    networks:
      - poker_network

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      # âœ… CORRECT: Use proper environment variable syntax
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-https://shahin8n.sbs/grafana/}
      - GF_SERVER_SERVE_FROM_SUB_PATH=${GRAFANA_SERVE_FROM_SUB_PATH:-true}
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-shahin8n.sbs}
      - GF_SERVER_PROTOCOL=${GRAFANA_PROTOCOL:-http}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GRAFANA_ALLOW_SIGN_UP:-false}
      - GF_AUTH_ANONYMOUS_ENABLED=${GRAFANA_ANONYMOUS_ENABLED:-false}
      - GF_LOG_MODE=${GRAFANA_LOG_MODE:-console}
      - GF_LOG_LEVEL=${GRAFANA_LOG_LEVEL:-info}
    volumes:
      # Provisioning directory includes dashboards and data sources; avoid overlapping mounts
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - poker_network

networks:
  poker_network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
